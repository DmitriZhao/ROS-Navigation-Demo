<launch>
    <arg name="model" default="waffle" doc="model type [burger, waffle]"/>
    <arg name="amcl" default="false" />
    <arg name="gmapping" default="false" />
    <!-- Turtlebot3 -->
    <include file="$(find turtlebot3_gazebo)/launch/turtlebot3_house.launch"/>
    <include file="$(find turtlebot3_bringup)/launch/includes/description.launch.xml">
        <arg name="model" value="$(arg model)" />
    </include>
    <!-- Map server -->
    <arg name="map_file" default="$(find simple_navigation_goals)/config/tb3_house.yaml"/>
    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
    </node>
    <!-- Navigation Stack -->
        <!-- Move Base Flex -->
        <node pkg="mbf_costmap_nav" type="mbf_costmap_nav" respawn="false" name="move_base_flex" launch-prefix="gdb -ex run --args" output="screen">
            <param name="tf_timeout" value="1.5"/>
            <param name="planner_max_retries" value="3"/>
            <param name="recovery_behavior_enabled" value="true"/>
            <param name="clearing_rotation_allowed" value="false"/>
            <param name="SBPLLatticePlanner/primitive_filename" value="$(find simple_navigation_goals)/mprim/ceres_5cm.mprim"/>
            <rosparam file="$(find simple_navigation_goals)/config/planners.yaml" command="load" />
            <rosparam file="$(find simple_navigation_goals)/config/controllers.yaml" command="load" />
            <rosparam file="$(find simple_navigation_goals)/config/recovery_behaviors.yaml" command="load" />
            <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap"/>
            <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
            <rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params.yaml" command="load" />
            <rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params.yaml" command="load" />
        </node>
    <!-- RTAB-Map -->
    <!-- <include file="$(find rtabmap_ros)/launch/demo/demo_turtlebot3_navigation.launch">
        <arg name="localization" value="true"/>
    </include> -->
      <!-- Arguments -->
    <arg name="open_rviz" default="true"/>
    <arg name="rtabmapviz" default="true"/>
    <arg name="move_forward_only" default="false"/>

    <arg name="with_camera" default="true"/>
    <arg name="localization" default="false"/>
    <arg name="database_path" default="~/.ros/rtabmap.db"/>
    <arg     if="$(arg localization)" name="rtabmap_args" default=""/>
    <arg unless="$(arg localization)" name="rtabmap_args" default="-d"/>

    <!-- Turtlebot3 -->
    <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch">
        <arg name="model" value="$(arg model)" />
    </include>

    <group ns="rtabmap">
        <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg rtabmap_args)">
        <param name="database_path"       type="string" value="$(arg database_path)"/>
        <param name="frame_id"            type="string" value="base_footprint"/>
            <param     if="$(eval model=='waffle')" name="subscribe_rgb" type="bool" value="true"/>
    <!--          <param unless="$(eval model=='waffle')" name="subscribe_rgb" type="bool" value="false"/> -->
            <param     if="$(eval model=='waffle')" name="subscribe_depth" type="bool" value="true"/>
    <!--          <param unless="$(eval model=='waffle')" name="subscribe_depth" type="bool" value="false"/> -->
        <param name="subscribe_scan"      type="bool"   value="true"/>
            <param name="approx_sync"         type="bool"   value="true"/>

            <!-- use actionlib to send goals to move_base --> 
        <param name="use_action_for_goal" type="bool" value="true"/>
            <remap from="move_base"            to="/move_base"/>
        
        <!-- inputs -->
        <remap from="scan"            to="/scan"/>
        <remap from="odom"            to="/odom"/>
        <remap from="rgb/image"       to="/camera/rgb/image_raw"/>
        <remap from="depth/image"     to="/camera/depth/image_raw"/>
        <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>

        <!-- output -->
        <remap from="grid_map" to="/map"/>
        
        <!-- RTAB-Map's parameters -->
        <param name="Reg/Strategy"                 type="string" value="1"/>
        <param name="Reg/Force3DoF"                type="string" value="true"/>
        <param name="GridGlobal/MinSize"           type="string" value="20"/>

        <!-- localization mode -->
        <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
        <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
        </node>

        <!-- visualization with rtabmapviz -->
        <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
        <param name="subscribe_scan"   type="bool"   value="true"/>
        <param name="subscribe_odom"   type="bool"   value="true"/>
        <param name="subscribe_rgb"    type="bool"   value="true"/>
        <param name="subscribe_depth"  type="bool"   value="true"/>
        <param name="frame_id"         type="string" value="base_footprint"/>
        <param name="approx_sync"      type="bool"   value="true"/>

        <remap from="odom"            to="/odom"/>
        <remap from="scan"            to="/scan"/>
        </node>
    </group>

  <!-- rviz -->
  <group if="$(arg open_rviz)"> 
    <node pkg="rviz" type="rviz" name="rviz" required="true"
          args="-d $(find turtlebot3_navigation)/rviz/turtlebot3_navigation.rviz"/>
  </group>

</launch>
